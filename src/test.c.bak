#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdio.h>
#include <time.h>

// Global time variable (tracks UNIX time)
volatile time_t current_time = 0;

// Function to initialize UART for debugging (9600 baud rate)
void uart_init(void) {
    // Set baud rate to 9600 (for 16 MHz clock)
    UBRR0H = 0;
    UBRR0L = 103;

    // Enable transmitter and receiver
    UCSR0B = (1 << TXEN0) | (1 << RXEN0);
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8-bit data
}

// Function to send a single character via UART
void uart_putchar(char c) {
    while (!(UCSR0A & (1 << UDRE0))); // Wait until buffer is empty
    UDR0 = c;
}

// Function to send a string via UART
void uart_puts(const char *s) {
    while (*s) {
        uart_putchar(*s++);
    }
}

// TIMER1 SETUP (1Hz Interrupt)
void timer1_init(void) {
    TCCR1B |= (1 << WGM12); // CTC Mode
    OCR1A = 15624;          // Compare match value (for 1Hz @ 16MHz clock)
    TCCR1B |= (1 << CS12) | (1 << CS10); // Prescaler 1024
    TIMSK1 |= (1 << OCIE1A); // Enable Timer1 Compare Match A interrupt
    sei(); // Enable global interrupts
}

// ISR (Interrupt Service Routine) for Timer1
ISR(TIMER1_COMPA_vect) {
    current_time++; // Increment global time every 1 second
}

int main(void) {
    uart_init();  // Initialize UART
    timer1_init(); // Initialize Timer1

    struct tm timeinfo;
    char buffer[64];

    // Initial time (Set to Jan 1, 2025, 00:00:00)
    struct tm start_time = { .tm_sec = 0, .tm_min = 0, .tm_hour = 0, .tm_mday = 1, .tm_mon = 0, .tm_year = 125 };
    current_time = mktime(&start_time); // Convert struct tm to UNIX timestamp

    while (1) {
        // Convert UNIX timestamp to human-readable time
        localtime_r(&current_time, &timeinfo);

        // Format time as a string (HH:MM:SS)
        snprintf(buffer, sizeof(buffer), "Time: %02d:%02d:%02d\r\n", timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);
        uart_puts(buffer); // Print time over UART

        _delay_ms(1000); // Delay 1 second (for visualization)
    }
}
